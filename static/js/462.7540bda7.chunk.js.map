{"version":3,"file":"static/js/462.7540bda7.chunk.js","mappings":"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","sources":["components/MovieMainInfo/MovieMainInfo.styled.jsx","components/MovieMainInfo/MovieMainInfo.jsx","components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","components/AddInfo/AddInfo.styled.jsx","components/AddInfo/AddInfo.jsx","pages/MovieDetails.jsx","services/ApiService.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Section = styled.div`\n    display: flex;\n    padding: 10px;\n    border-bottom: 3px solid gray;\n    line-height: 1.5;\n\n    & img {\n        margin-right: 15px;\n    }\n\n    & span {\n        margin-right: 10px;\n    }\n`","import PropTypes from 'prop-types';\nimport { Section } from \"./MovieMainInfo.styled\";\n\nconst MovieMainInfo = ({details}) => {\n    const { poster_path, original_title, overview, genres, release_date, vote_average } = details;\n\n    return (\n        <Section>\n            <img src={`https://image.tmdb.org/t/p/w500/${poster_path}`} alt={original_title} width=\"300\" />\n            <div>\n                <h2>{`${original_title} (${release_date.slice(0, 4)})`}</h2>\n                <p>User score: {Math.round(vote_average*10)}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h4>Genres</h4>\n                <p>{genres.map(({id, name}) => <span key={id}>{name}</span>)}</p>\n            </div>\n        </Section>\n    )\n}\n\nexport default MovieMainInfo;\n\nMovieMainInfo.propTypes = {\n    details: PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired, \n      overview: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(PropTypes.shape({\n                id: PropTypes.number.isRequired, \n                name: PropTypes.string.isRequired,\n            })).isRequired,\n      release_date: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n    }).isRequired,\n    \n}","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: #54c7a4;\n  }\n`;","import PropTypes from 'prop-types';\nimport { HiArrowLeft } from \"react-icons/hi\";\nimport { StyledLink } from \"./BackLink.styled\";\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nexport default BackLink;\n\nBackLink.propTypes = {\n  to: PropTypes.object.isRequired,\n  children: PropTypes.node.isRequired,\n}","import styled from '@emotion/styled';\n\nexport const Section = styled.div`\n    border-bottom: 3px solid gray;\n\n    & p {\n        font-weight: 500;\n        font-size: 20px;\n    }\n\n    & a {\n        text-decoration: none;\n        font-weight: 500;\n        color: #120d2b;\n\n        :hover,\n        :focus {\n            color: #6fc6d1;\n        }\n    }       \n`;","import { Link } from \"react-router-dom\";\nimport { Section } from \"./AddInfo.styled\";\n\nconst AddInfo = () => {\n    return (\n        <Section>\n            <p>Additional information</p>\n            <ul>\n                <li>\n                    <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\">Reviews</Link>\n                </li>\n            </ul>\n        </Section>\n    )\n}\n\nexport default AddInfo;","import { toast } from 'react-toastify';\nimport { Suspense, useEffect, useRef, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport * as API from 'services/ApiService';\nimport MovieMainInfo from 'components/MovieMainInfo/MovieMainInfo';\nimport BackLink from 'components/BackLink/BackLink';\nimport AddInfo from 'components/AddInfo/AddInfo';\n\nconst MovieDitails = () => {\n    const [details, setDetails] = useState(null);\n    const [error, setError] = useState('');\n    const { movieId } = useParams();\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n    useEffect(() => {\n        if(!movieId) {\n            return;\n        }\n\n       getMovieDetails(movieId);\n    }, [movieId]);\n\n    const getMovieDetails = async (id) => {\n        try {\n            const movieDetails = await API.getMovieById(id);\n             if(movieDetails === {}) {\n                return toast.error('Sorry, there are no movies matching your search query. Please try again.');\n                }   \n                \n            setDetails(movieDetails);\n        } catch (error) {\n            setError(error);\n        }\n    };\n\n    return (\n        <div>\n            <BackLink to={backLinkLocationRef.current}>Go back</BackLink>\n            {details && <MovieMainInfo details={details} />}\n            <AddInfo />\n            <Suspense fallback={<div>Loading subpage...</div>}>\n                    <Outlet />\n            </Suspense>\n            {error && toast.error(\"Oops, an error occurred while loading the page. Please try reloading the page\")}\n        </div>\n    )\n}\n\nexport default MovieDitails;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["Section","styled","details","poster_path","original_title","overview","genres","release_date","vote_average","src","alt","width","slice","Math","round","map","id","name","StyledLink","Link","to","children","size","useState","setDetails","error","setError","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieDetails","API","movieDetails","toast","current","Suspense","fallback","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById","getMovieSubInfo","option"],"sourceRoot":""}