{"version":3,"file":"static/js/415.8a2e2947.chunk.js","mappings":"wKAoBA,IAjBoB,SAAC,GAA0B,IAAzBA,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,wBACKH,EAAOI,KAAI,YAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MACRC,EAAI,UAAMN,EAAa,UAAY,IAA/B,OAAoCI,GAC9C,OACI,yBACI,SAAC,KAAD,CAAMG,GAAID,EAAME,MAAO,CAACC,KAAMR,GAA9B,SAA0CI,KADrCD,EAGX,KAIjB,C,0HCsBD,UAnCa,WACT,OAA4BM,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACHf,IAAW,IAIdgB,GACH,GAAE,CAAChB,IAEJ,IAAMgB,EAAS,mCAAG,6GAEeC,EAAAA,KAFf,UAGwB,KAD5BC,EAFI,QAGKC,QAAQC,OAHb,yCAICC,EAAAA,GAAAA,MAAY,6EAJb,OAQVT,EAAUM,EAAWC,SARX,gDAUVL,EAAS,EAAD,IAVE,yDAAH,qDAcf,OACI,6BACI,4CACA,SAAC,IAAD,CAAYd,OAAQA,EAAQC,YAAY,IACvCY,GAASQ,EAAAA,GAAAA,MAAY,mFAGjC,C,mJCpCKC,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qDAQjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BM,IAFpB,cACxBH,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBG,EAAY,mCAAG,WAAMzB,GAAN,uFACHoB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BjB,EAA9B,oBAA4CkB,IADzC,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/ApiService.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviestList = ({movies, isFromHome}) => {\n    const location = useLocation();\n\n    return (\n        <ul>\n            {movies.map(({id, title}) => {\n                const path = `${isFromHome ? 'movies/' : ''}${id}`;\n                return (\n                    <li key={id}>\n                        <Link to={path} state={{from: location}}>{title}</Link>\n                    </li>\n                )}\n            )}\n        </ul>\n    )\n}\n\nexport default MoviestList;\n\nMoviestList.propTypes = {\n    movies: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),),\n    isFromHome: PropTypes.bool,\n}","import { toast } from 'react-toastify';\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport { useEffect, useState } from \"react\";\nimport * as API from 'services/ApiService';\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if(movies === []) {\n            return;\n        }\n\n        getMovies();\n    }, [movies]);\n\n    const getMovies = async () => {\n        try {\n            const moviesData = await API.getTrendingMovies();\n             if(moviesData.results.length === 0) {\n                return toast.error('Sorry, there are no images matching your search query. Please try again.');\n                }\n           \n\n            setMovies(moviesData.results);\n        } catch (error) {\n            setError(error);\n        }   \n    };\n\n    return (\n        <main>\n            <h1>Trending today</h1>\n            <MoviesList movies={movies} isFromHome={true} />\n            {error && toast.error(\"Oops, an error occurred while loading the page. Please try reloading the page\")}\n        </main>\n    )\n}   \n\nexport default Home;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n"],"names":["movies","isFromHome","location","useLocation","map","id","title","path","to","state","from","useState","setMovies","error","setError","useEffect","getMovies","API","moviesData","results","length","toast","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById"],"sourceRoot":""}