{"version":3,"file":"static/js/186.4f695e7b.chunk.js","mappings":"yOAoDA,UA9CgB,WACZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAiBC,EAAAA,EAAAA,MAAcC,SAASC,SAAS,YAEvDC,EAAAA,EAAAA,YAAU,WACFJ,GAILK,EAAgBT,EAAS,UAC3B,GAAE,CAACA,EAASI,IAEb,IAAMK,EAAe,mCAAG,WAAOC,EAAIC,GAAX,gGAEWC,EAAAA,GAAoBF,EAAIC,GAFnC,aAEVE,EAFU,QAGE,GAHF,yCAILC,EAAAA,GAAAA,MAAY,6EAJP,OAOhBC,QAAQC,IAAIH,EAAaI,SACzBlB,EAAWc,EAAaI,SARR,kDAUhBd,EAAS,EAAD,IAVQ,0DAAH,wDAcrB,OACG,2BACML,EAAQoB,OAAS,GACd,wBACKpB,EAAQqB,KAAI,gBAAET,EAAF,EAAEA,GAAIU,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAAd,OACT,2BACI,wBAAKD,KACL,uBAAIC,MAFCX,EADA,OAOf,qEAENR,GAASY,EAAAA,GAAAA,MAAY,mFAGhC,C,2KChDKQ,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qDAQjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BM,IAFpB,cACxBH,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBG,EAAY,mCAAG,WAAMpB,GAAN,uFACHe,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BZ,EAA9B,oBAA4Ca,IADzC,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAe,mCAAG,WAAOrB,EAAIC,GAAX,uFACNc,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDZ,EADC,YACKC,EADL,oBACuBY,IAFjB,cACvBG,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD","sources":["components/Reviews/Reviews.jsx","services/ApiService.js"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport * as API from 'services/ApiService';\n\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n    const [error, setError] = useState('');\n    const isLocationCast = useLocation().pathname.includes('reviews');\n\n    useEffect(() => {\n        if(!isLocationCast) {\n            return;\n        }\n\n       getMovieReviews(movieId, 'reviews');\n    }, [movieId, isLocationCast]);\n\n    const getMovieReviews = async (id, option) => {\n        try {\n            const movieReviews = await API.getMovieSubInfo(id, option);\n            if(movieReviews > 0) {\n                return toast.error('Sorry, there are no movies matching your search query. Please try again.');\n                } \n\n            console.log(movieReviews.results);\n            setReviews(movieReviews.results);\n        } catch (error) {\n            setError(error);\n        }\n    };\n\n    return (\n       <div>\n            {reviews.length > 0 ?\n                <ul>\n                    {reviews.map(({id, author, content}) => \n                        <li key={id}>\n                            <h4>{author}</h4>\n                            <p>{content}</p>\n                        </li>\n                    )}\n                </ul>\n                : <p>We don`t have any reviews for this movies</p>\n            }\n           {error && toast.error(\"Oops, an error occurred while loading the page. Please try reloading the page\")} \n        </div>\n    )\n}\n\nexport default Reviews;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","error","setError","isLocationCast","useLocation","pathname","includes","useEffect","getMovieReviews","id","option","API","movieReviews","toast","console","log","results","length","map","author","content","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById","getMovieSubInfo"],"sourceRoot":""}