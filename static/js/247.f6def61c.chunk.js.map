{"version":3,"file":"static/js/247.f6def61c.chunk.js","mappings":"0OAsDA,UAhDa,WACT,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACFJ,GAILK,EAAaL,EAAS,UACxB,GAAE,CAACA,IAEJ,IAAMK,EAAY,mCAAG,WAAOC,EAAIC,GAAX,gGAEWC,EAAAA,GAAoBF,EAAIC,GAFnC,UAGgB,KADvBE,EAFO,QAGAX,KAAKY,OAHL,yCAIFC,EAAAA,GAAAA,MAAY,sCAJV,OAObZ,EAAQU,EAAUX,MAPL,gDASbK,EAAS,EAAD,IATK,yDAAH,wDAalB,OACI,2BACKL,IACG,wBACKA,EAAKc,KAAI,gBAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,aAA5B,OACN,2BACI,gBAAKC,IAAKD,EAAY,0CACmBA,GADnB,+DAGlBE,IAAKJ,EACLK,MAAO,OACX,uBAAIL,KACJ,uCAAeC,OAPVF,EADH,MAalBX,GAASS,EAAAA,GAAAA,MAAY,mFAGhC,C,2KClDKS,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qDAQjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BM,IAFpB,cACxBH,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBG,EAAY,mCAAG,WAAMtB,GAAN,uFACHiB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Bd,EAA9B,oBAA4Ce,IADzC,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAe,mCAAG,WAAOvB,EAAIC,GAAX,uFACNgB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDd,EADC,YACKC,EADL,oBACuBc,IAFjB,cACvBG,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD","sources":["components/Cast/Cast.jsx","services/ApiService.js"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as API from 'services/ApiService';\n\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const { movieId } = useParams();\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if(!movieId) {\n            return;\n        }\n\n       getMovieCast(movieId, 'credits');\n    }, [movieId]);\n\n    const getMovieCast = async (id, option) => {\n        try {\n            const movieCast = await API.getMovieSubInfo(id, option);\n            if(movieCast.cast.length === 0) {\n                return toast.error('Sorry, we didn`t find any actors.');\n                } \n\n            setCast(movieCast.cast);\n        } catch (error) {\n            setError(error);\n        }\n    };\n\n    return (\n        <div>\n            {cast &&\n                <ul>\n                    {cast.map(({cast_id, name, character, profile_path}) => \n                        <li key={cast_id}>\n                            <img src={profile_path\n                                ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                                : `https://m.media-amazon.com/images/S/sash/9FayPGLPcrscMjU.png`} \n                                alt={name} \n                                width={150} />\n                            <p>{name}</p>\n                            <p>Character: {character}</p>\n                        </li>\n                    )}\n                </ul>\n            }\n           {error && toast.error(\"Oops, an error occurred while loading the page. Please try reloading the page\")} \n        </div>\n    )\n}\n\nexport default Cast;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["useState","cast","setCast","movieId","useParams","error","setError","useEffect","getMovieCast","id","option","API","movieCast","length","toast","map","cast_id","name","character","profile_path","src","alt","width","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById","getMovieSubInfo"],"sourceRoot":""}