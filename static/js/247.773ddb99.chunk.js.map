{"version":3,"file":"static/js/247.773ddb99.chunk.js","mappings":"0OAwDA,UAlDa,WACT,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAiBC,EAAAA,EAAAA,MAAcC,SAASC,SAAS,SAEvDC,EAAAA,EAAAA,YAAU,WACFJ,GAILK,EAAaT,EAAS,UACxB,GAAE,CAACA,EAASI,IAEb,IAAMK,EAAY,mCAAG,WAAOC,EAAIC,GAAX,gGAEWC,EAAAA,GAAoBF,EAAIC,GAFnC,aAEPE,EAFO,QAGE,GAHF,yCAIFC,EAAAA,GAAAA,MAAY,6EAJV,OAObf,EAAQc,EAAUf,MAPL,gDASbK,EAAS,EAAD,IATK,yDAAH,wDAalB,OACI,2BACKL,EAAKiB,OAAS,GACX,wBACKjB,EAAKkB,KAAI,gBAAEN,EAAF,EAAEA,GAAIO,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,aAAvB,OACN,2BACI,gBAAKC,IAAMD,EAAY,0CACkBA,GADlB,+DAGnBE,IAAKJ,EACLK,MAAO,OACX,uBAAIL,KACJ,uCAAeC,OAPVR,EADH,OAYZ,4DAENR,GAASY,EAAAA,GAAAA,MAAY,mFAGhC,C,2KCpDKS,EAAW,gCACXC,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qDAQjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC2BM,IAFpB,cACxBH,EADwB,yBAKvBA,EAASC,MALc,2CAAH,sDAQhBG,EAAY,mCAAG,WAAMrB,GAAN,uFACHgB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Bb,EAA9B,oBAA4Cc,IADzC,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAe,mCAAG,WAAOtB,EAAIC,GAAX,uFACNe,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDb,EADC,YACKC,EADL,oBACuBa,IAFjB,cACvBG,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD","sources":["components/Cast/Cast.jsx","services/ApiService.js"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { useEffect, useState } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport * as API from 'services/ApiService';\n\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const { movieId } = useParams();\n    const [error, setError] = useState('');\n    const isLocationCast = useLocation().pathname.includes('cast');\n\n    useEffect(() => {\n        if(!isLocationCast) {\n            return;\n        }\n\n       getMovieCast(movieId, 'credits');\n    }, [movieId, isLocationCast]);\n\n    const getMovieCast = async (id, option) => {\n        try {\n            const movieCast = await API.getMovieSubInfo(id, option);\n            if(movieCast > 0) {\n                return toast.error('Sorry, there are no movies matching your search query. Please try again.');\n                } \n\n            setCast(movieCast.cast);\n        } catch (error) {\n            setError(error);\n        }\n    };\n\n    return (\n        <div>\n            {cast.length > 0 ?\n                <ul>\n                    {cast.map(({id, name, character, profile_path}) => \n                        <li key={id}>\n                            <img src={ profile_path\n                                ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                                : `https://m.media-amazon.com/images/S/sash/9FayPGLPcrscMjU.png`} \n                                alt={name} \n                                width={150} />\n                            <p>{name}</p>\n                            <p>Character: {character}</p>\n                        </li>\n                    )}\n                </ul>\n                : <p>Sorry, we didn`t find any actors</p>\n            }\n           {error && toast.error(\"Oops, an error occurred while loading the page. Please try reloading the page\")} \n        </div>\n    )\n}\n\nexport default Cast;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f2fae09050301062329c7f99a1fba61d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${KEY}`);\n\n  return response.data;\n};\n\nexport const getMovieSubInfo = async (id, option) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${option}?api_key=${KEY}`\n  );\n\n  return response.data;\n};\n"],"names":["useState","cast","setCast","movieId","useParams","error","setError","isLocationCast","useLocation","pathname","includes","useEffect","getMovieCast","id","option","API","movieCast","toast","length","map","name","character","profile_path","src","alt","width","BASE_URL","KEY","getTrendingMovies","axios","response","data","getMoviesByQuery","query","getMovieById","getMovieSubInfo"],"sourceRoot":""}